{

open FSharp.Text.Lexing
open Parser

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}


let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule expr = parse
| whitespace               { expr lexbuf }
| newline                  { newline lexbuf; expr lexbuf }
| "("                      { LPAREN }
| ")"                      { RPAREN }
| "+"                      { PLUS }
| "-"                      { MINUS }
| "*"                      { MUL }
| "/"                      { DIV}
| ['-']?digit+('.'digit+)? { NUMBER (new System.String(lexbuf.Lexeme) |> float) }
| eof                      { EOF }